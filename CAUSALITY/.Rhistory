table(class_size = star$kinder, year = star$yearssmall)
## 使用tapply(x2, x1, mean)计算对于x1的x2的平均数
## 使用tapply(x2, x1, median)计算对于x1的x2的中位数
## 在小班不同年数的学生的阅读平均数和中位数
tapply(star$g4reading, star$yearssmall, mean, na.rm = TRUE)
tapply(star$g4reading, star$yearssmall, median, na.rm = TRUE)
## 在小班不同年数的学生的数学的平均数和中位数
tapply(star$g4math, star$yearssmall, mean, na.rm = TRUE)
tapply(star$g4math, star$yearssmall, median, na.rm = TRUE)
#### Question 5 ####
## 在各个班级规模中，白人都有更高的成绩
## 正常大小班级中不同种族的四年级阅读平均分
tapply(generalClass$g4reading, generalClass$race, mean, na.rm = TRUE)
## 正常大小班级中不同种族的四年级数学平均分
tapply(generalClass$g4math, generalClass$race, mean, na.rm = TRUE)
## 小班中不同种族的四年级阅读平均分
tapply(smallClass$g4reading, smallClass$race, mean, na.rm = TRUE)
## 小班中不同种族的四年级数学平均分
tapply(smallClass$g4math, smallClass$race, mean, na.rm = TRUE)
#### Question 6 ####
## 分配给不同班级类型的学生的高中毕业率
tapply(star$hsgrad, star$kinder, mean, na.rm = TRUE)
## 小班学习年数的高中毕业率
tapply(star$hsgrad, star$yearssmall, mean, na.rm = TRUE)
## 不同种族之间的高中毕业率
tapply(star$hsgrad, star$race, mean, na.rm = TRUE)
# 获取数据
gay <- read.csv("Datasets/gay.csv")
# 日常对数据进行简单的观察
dim(gay)
summary(gay)
head(gay)
Study1.wave1 <- subset(gay, subset = ((gay$study == 1)&
(gay$wave == 1)))
tapply(Study1.wave1$ssm, study1.wave1$treatment, mean)
tapply(Study1.wave1$ssm, Study1.wave1$treatment, mean)
# 干预分配的随机化是否实现
# 获取第一项研究的第一次干预前的数据
Study1.wave1 <- subset(gay, subset = ((gay$study == 1)&
(gay$wave == 1)))
tapply(Study1.wave1$ssm, Study1.wave1$treatment, mean)
NoContact1 <- subset(gay, subset =((gay$study == 1)&
(gay$treatment == "No Contact")))
#### Question 2 ####
## 计算控制组的两次访谈的结果差异
NoContact1.wave1.mean <- mean(NoContact1$ssm[NoContact1$wave == 2]) -
mean(NoContact1$ssm[NoContact1$wave == 1])
# 计算DID
DiD.gay1wave1 <- (mean(SSMbyGay1.wave1) - mean(SSMbyGay1.wave2)) - NoContact1.wave1.mean
DiD.gay1wave1
gay <- read.csv("Datasets/gay.csv")
# 日常对数据进行简单的观察
dim(gay)
summary(gay)
head(gay)
#### Question 1 ####
# 观察treatment的值
unique(gay$treatment)
# 获取第一项研究的三组的数据值
NoContact1 <- subset(gay, subset =((gay$study == 1)&
(gay$treatment == "No Contact")))
SSMbyGay1 <- subset(gay, subset =((gay$study == 1)&
(gay$treatment == "Same-Sex Marriage Script by Gay Canvasser")))
SSMbyStra1<- subset(gay, subset =((gay$study == 1)&
(gay$treatment == "Same-Sex Marriage Script by Straight Canvasser")))
# 分析数据
summary(NoContact1)
summary(SSMbyGay1)
summary(SSMbyStra1)
# 干预分配的随机化是否实现
# 获取第一项研究的第一次干预前的数据
Study1.wave1 <- subset(gay, subset = ((gay$study == 1)&
(gay$wave == 1)))
tapply(Study1.wave1$ssm, Study1.wave1$treatment, mean)
# 获取第一个研究数据中同性恋宣传对同性恋话题第一次和第二次结果的效果
SSMbyGay1.wave1 <- SSMbyGay1$ssm[SSMbyGay1$wave == 1]
# 计算平均值
mean(SSMbyGay1.wave1)
SSMbyGay1.wave2 <- SSMbyGay1$ssm[SSMbyGay1$wave == 2]
# 计算平均值
mean(SSMbyGay1.wave2)
DiD.gay1wave1
DiD.gay1wave1 <- (mean(SSMbyGay1.wave1) - mean(SSMbyGay1.wave2)) - NoContact1.wave1.mean
DiD.gay1wave1
# 计算DID
DiD.gay1wave1 <- (mean(SSMbyGay1.wave2) - mean(SSMbyGay1.wave1)) - NoContact1.wave1.mean
DiD.gay1wave1
# 计算DID
DiD.gay1wave2 <- (mean(SSMbyGay1.wave2) - mean(SSMbyGay1.wave1)) - NoContact1.wave1.mean
DiD.gay1wave2
DiD.gay1wave2 <- (mean(SSMbyStra1.wave2) - mean(SSMbyStra1.wave1)) - NoContact1.wave1.mean
mean(SSMbyStra1.wave1)
# 获取第一个研究数据中异性恋宣传对同性恋话题第一次和第二次结果的效果
SSMbyStra1.wave1 <- SSMbyStra1$ssm[SSMbyStra1$wave == 1]
# 计算平均宣传值
mean(SSMbyStra1.wave1)
SSMbyStra1.wave2 <- SSMbyStra1$ssm[SSMbyStra1$wave == 2]
# 计算平均值
mean(SSMbyStra1.wave2)
# 计算DiD
DiD.gay1wave2 <- (mean(SSMbyStra1.wave2) - mean(SSMbyStra1.wave1)) - NoContact1.wave1.mean
DiD.gay1wave2
## 计算差值
DiD.gay1wave2 - DiD.gay1wave2
DiD.stra1wave2 <- (mean(SSMbyStra1.wave2) - mean(SSMbyStra1.wave1)) - NoContact1.wave1.mean
DiD.stra1wave2
DiD.gay1wave2 <- (mean(SSMbyGay1.wave2) - mean(SSMbyGay1.wave1)) - NoContact1.wave1.mean
DiD.gay1wave2
## 计算差值
DiD.gay1wave2 - DiD.stra1wave2
## 获取第一次访谈结果
RecyclebyGay1.wave1 <- RecyclebyGay1$ssm[RecyclebyGay1$wave == 1]
RecyclebyGay1 <- subset(gay, subset = ((gay$study == 1)&
gay$treatment == "Recycling Script by Gay Canvasser") )
RecyclebyStra1<- subset(gay, subset = ((gay$study == 1)&
gay$treatment == "Recycling Script by Straight Canvasser") )
# 获取第二次访谈的结果
RecyclebyGay1.wave2 <- RecyclebyGay1$ssm[RecyclebyGay1$wave == 2]
mean(RecyclebyGay1.wave2)
RecyclebyStra1.wave2 <- RecyclebyStra1$ssm[RecyclebyStra1$wave == 2]
mean(RecyclebyStra1.wave2)
## 获取第一次访谈结果
RecyclebyGay1.wave1 <- RecyclebyGay1$ssm[RecyclebyGay1$wave == 1]
mean(RecyclebyGay1.wave1)
RecyclebyStra1.wave1 <- RecyclebyStra1$ssm[RecyclebyStra1$wave == 1]
mean(RecyclebyStra1.wave1)
# 比较
# 回收废品话题中的同性恋宣传者DID
DiD.RGay1wave2 <- ((mean(RecyclebyGay1.wave2) - mean(RecyclebyGay1.wave1)) - NoContact1.wave1.mean
# 比较
# 回收废品话题中的同性恋宣传者DID
DiD.RGay1wave2 <- (mean(RecyclebyGay1.wave2) - mean(RecyclebyGay1.wave1)) - NoContact1.wave1.mean
# 比较
# 回收废品话题中的同性恋宣传者DID
DiD.RGay1wave2 <- (mean(RecyclebyGay1.wave2) - mean(RecyclebyGay1.wave1)) - NoContact1.wave1.mean
DiD.RGay1wave2
DiD.Rstar1wave2 <- (mean(RecyclebyStra1.wave2) - mean(RecyclebyStra1.wave2)) - NoContact1.wave1.mean
DiD.Rstar1wave2
DiD.Rstar1wave2 <- (mean(RecyclebyStra1.wave2) - mean(RecyclebyStra1.wave1)) - NoContact1.wave1.mean
DiD.Rstar1wave2
# 比较差异
DiD.RGay1wave2 - DiD.Rstar1wave2
# 比较
DiD.gay1wave2
# 定义一个函数
# 计算控制组的mean
tapply(NoContact1$ssm, NoContact1$wave, mean)
# 定义一个函数
# 计算控制组的mean
NoContact1.mean <- tapply(NoContact1$ssm, NoContact1$wave, mean)
NoContact1.mean[1]
# 定义一个函数
# 计算控制组的mean
NoContact1.mean <- data.frame(tapply(NoContact1$ssm, NoContact1$wave, mean))
NoContact1.mean
# 定义一个函数
# 计算控制组的mean
NoContact1.mean <- list(tapply(NoContact1$ssm, NoContact1$wave, mean))
NoContact1.mean
NoContact1.mean[1]
NoContact1.mean[[1]]
NoContact1.mean[[1,1]]
NoContact1.mean[1,1]]
NoContact1.mean[1,1]
NoContact1.mean[1][1]
NoContact1.mean[[1]][1]
NoContact1.mean[[1]][2]- NoContact1.mean[[1]][1]
NoContact1.mean[[1]][2]- NoContact1.mean[[1]][1] - 3
# 定义一个函数
# 计算控制组的mean
NoContact1.mean <- data.frame(mean = tapply(NoContact1$ssm, NoContact1$wave, mean))
NoContact1.mean
NoContact1.mean[1, 1]
NoContact1.mean <- data.frame(mean = tapply(NoContact1$ssm, NoContact1$wave, mean))
NoContact1.mean
getSSMeffect <- function(x){
##
## Args: data.frame
## return: 每轮的平均效果
## 计算第一项研究中XXX对同性恋脚本的每轮效果的平均值
count <- (2:7)
output <- c()
for (i in count) {
meanNoContact <- NoContact1.mean[1, x] - NoContact1.mean[1, 1]
meanEffect <-mean(x$ssm[x$wave == i ]) - mean(x$ssm[x$wave == i-1]) - meanNoContact
output[i] <- meanEffect
}
return(output)
}
# 每轮同性恋宣传同性恋脚本的平均效果
SSMbyGay1.mean <- getSSMeffect(SSMbyGay1)
class(SSMbyGay1)
getSSMeffect <- function(x){
##
## Args: data.frame
## return: 每轮的平均效果
## 计算第一项研究中XXX对同性恋脚本的每轮效果的平均值
count <- (2:7)
output <- c()
for (i in count) {
meanNoContact <- NoContact1.mean[1, i] - NoContact1.mean[1, 1]
meanEffect <-mean(x$ssm[x$wave == i ]) - mean(x$ssm[x$wave == i-1]) - meanNoContact
output[i] <- meanEffect
}
return(output)
}
# 每轮同性恋宣传同性恋脚本的平均效果
SSMbyGay1.mean <- getSSMeffect(SSMbyGay1)
SSMbyStra1.mean <- getSSMeffect(SSMbyStra1)
# 展示
SSMbyGay1.mean
SSMbyStra1.mean
getSSMeffect <- function(x){
##
## Args: data.frame
## return: 每轮的平均效果
## 计算第一项研究中XXX对同性恋脚本的每轮效果的平均值
count <- (2:7)
output <- c()
for (i in count) {
meanNoContact <- NoContact1.mean[1, i] - NoContact1.mean[1, 1]
meanEffect <-mean(x$ssm[x$wave == i ]) - mean(x$ssm[x$wave == i-1]) - meanNoContact
output[i] <- meanEffect
}
return(output)
}
# 每轮同性恋宣传同性恋脚本的平均效果
SSMbyGay1.mean <- getSSMeffect(SSMbyGay1)
SSMbyStra1.mean <- getSSMeffect(SSMbyStra1)
# 展示
SSMbyGay1.mean
SSMbyStra1.mean
meanNoContact <- NoContact1.mean[1, 2] - NoContact1.mean[1, 1]
meanNoContact
getSSMeffect <- function(x){
##
## Args: data.frame
## return: 每轮的平均效果
## 计算第一项研究中XXX对同性恋脚本的每轮效果的平均值
count <- (2:7)
output <- c()
for (i in count) {
meanNoContact <- NoContact1.mean[i, 1] - NoContact1.mean[1, 1]
meanEffect <-mean(x$ssm[x$wave == i]) - mean(x$ssm[x$wave ==i-1]) - meanNoContact
output[i] <- meanEffect
}
return(output)
}
# 每轮同性恋宣传同性恋脚本的平均效果
SSMbyGay1.mean <- getSSMeffect(SSMbyGay1)
SSMbyStra1.mean <- getSSMeffect(SSMbyStra1)
SSMbyGay1.mean
SSMbyStra1.mean
getSSMeffect <- function(x){
##
## Args: data.frame
## return: 每轮的平均效果
## 计算第一项研究中XXX对同性恋脚本的每轮效果的平均值
count <- (2:7)
output <- c()
for (i in count) {
meanNoContact <- NoContact1.mean[i, 1] - NoContact1.mean[1, 1]
meanEffect <-mean(x$ssm[x$wave == i]) - mean(x$ssm[x$wave ==i-1]) - meanNoContact
output[i - 1] <- meanEffect
}
return(output)
}
# 每轮同性恋宣传同性恋脚本的平均效果
SSMbyGay1.mean <- getSSMeffect(SSMbyGay1)
SSMbyStra1.mean <- getSSMeffect(SSMbyStra1)
# 展示
SSMbyGay1.mean
SSMbyStra1.mean
# 检验是否实现干预的随机化
# 获取第二项研究第一次调查的数据
Study2.Wave1 <- subset(gay, gay$study == 2 & gay$wave == 1)
# 计算干预前的平均得分水平
Study2.Wave1.mean <- tapply(Study2.Wave1$ssm, Study2.Wave1$treatment, mean)
Study2.Wave1.mean
#### Question 6 ####
## 创建第二项研究第二次调查的数据子集
Study2.Wave2 <- subset(gay, gay$study == 2 & gay$wave == 2)
## 以干预方式分组分别计算第二轮的平均得分水平
Study2.Wave2.mean <- tapply(Study2.Wave2$ssm, Study2.Wave2$treatment, mean)
## 将第一次和第二次数据转换成数据框
Study2.Wave1.mean <- as.data.frame(Study2.Wave1.mean)
Study2.Wave2.mean <- as.data.frame(Study2.Wave2.mean)
Study2.Wave1.mean
Study2.Wave2.mean
Study2DIDgay1 <- (Study2Wave2b[2,1] - Study2Wave1b[2,1]) - (Study2Wave2b[1,1] - Study2Wave1b[1,1])
## 将第一次和第二次数据转换成数据框
Study2.Wave1.mean <- as.data.frame(Study2.Wave1.mean)
Study2.Wave2.mean <- as.data.frame(Study2.Wave2.mean)
Study2.Wave1.mean
Study2.Wave2.mean
## 计算平均干预效应
Study2DIDgay1 <- (Study2Wave2b[2,1] - Study2Wave1b[2,1]) - (Study2Wave2b[1,1] - Study2Wave1b[1,1])
Study2DIDgay1 <- (Study2.Wave2.mean[2,1] - Study2.Wave1.mean[2,1]) - (Study2.Wave2.mean[1,1] - Study2.Wave1.mean[1,1])
Study2DIDgay1 - DIDgay1
DiD.gay2wave1 <- (Study2.Wave2.mean[2,1] - Study2.Wave1.mean[2,1]) - (Study2.Wave2.mean[1,1] - Study2.Wave1.mean[1,1])
DiD.gay2wave1 - DiD.gay1wave1
NoContact2 <- subset(gay,subset =((gay$study == 2)&
(gay$treatment == "No Contact")) )
NoContact2 <- subset(gay,subset =((gay$study == 2)&
(gay$treatment == "No Contact")) )
NoContact2.mean <- data.frame(mean = tapply(NoContact2$ssm, NoContact2$wave, mean))
NoContact2.mean
count[2]
count <- (2:7)
count[2]
count[-4:5]
count[-c(4,5)]
NoContact2 <- subset(gay,subset =((gay$study == 2)&
(gay$treatment == "No Contact")) )
NoContact2.mean <- data.frame(mean = tapply(NoContact2$ssm, NoContact2$wave, mean))
NoContact2.mean
getSSMeffect2 <- function(x){
##
## Args: data.frame
## return: 每轮的平均效果
## 计算第一项研究中XXX对同性恋脚本的每轮效果的平均值
count <- (2:7)
count[-c(4,5)]
output <- c()
for (i in 1:4) {
meanNoContact <- NoContact2.mean[count[i], 1] - NoContact2.mean[1, 1]
meanEffect <-mean(x$ssm[x$wave == count[i]]) - mean(x$ssm[x$wave ==count[i-1]]) - meanNoContact
output[count[i] - 1] <- meanEffect
names(output) <- count
}
return(output)
}
## 获取数据框
SSMbyGay2 <- subset(gay, (gay$study == 2)&
(gay$treatment == "Same-Sex Marriage Script by Gay Canvasser")) )
SSMbyGay2 <- subset(gay, (gay$study == 2)&
(gay$treatment == "Same-Sex Marriage Script by Gay Canvasser")))
## 获取数据框
SSMbyGay2 <- subset(gay, (gay$study == 2)&
(gay$treatment == "Same-Sex Marriage Script by Gay Canvasser"))
getSSMeffect2(SSMbyGay2)
getSSMeffect2 <- function(x){
##
## Args: data.frame
## return: 每轮的平均效果
## 计算第一项研究中XXX对同性恋脚本的每轮效果的平均值
count <- (2:7)
count[-c(4,5)]
output <- c()
for (i in 1:4) {
meanNoContact <- NoContact2.mean[count[i], 1] - NoContact2.mean[1, 1]
meanEffect <-mean(x$ssm[x$wave == count[i]]) - mean(x$ssm[x$wave ==count[i-1]]) - meanNoContact
output[count[i] - 1] <- meanEffect
names(output) <- count[-1]
}
return(output)
}
## 获取数据框
SSMbyGay2 <- subset(gay, (gay$study == 2)&
(gay$treatment == "Same-Sex Marriage Script by Gay Canvasser"))
getSSMeffect2(SSMbyGay2)
getSSMeffect2 <- function(x){
##
## Args: data.frame
## return: 每轮的平均效果
## 计算第一项研究中XXX对同性恋脚本的每轮效果的平均值
count <- (2:7)
count[-c(4,5)]
output <- c()
for (i in 1:4) {
meanNoContact <- NoContact2.mean[count[i], 1] - NoContact2.mean[1, 1]
meanEffect <-mean(x$ssm[x$wave == count[i]]) - mean(x$ssm[x$wave ==count[i-1]]) - meanNoContact
output[count[i] - 1] <- meanEffect
}
return(output)
}
## 获取数据框
SSMbyGay2 <- subset(gay, (gay$study == 2)&
(gay$treatment == "Same-Sex Marriage Script by Gay Canvasser"))
getSSMeffect2(SSMbyGay2)
NoContact2.mean
getSSMeffect2 <- function(x){
##
## Args: data.frame
## return: 每轮的平均效果
## 计算第一项研究中XXX对同性恋脚本的每轮效果的平均值
count <- (2:7)
count[-c(4,5)]
output <- c()
for (i in 1:4) {
meanNoContact <- NoContact2.mean[i + 1, 1] - NoContact2.mean[1, 1]
meanEffect <-mean(x$ssm[x$wave == count[i]]) - mean(x$ssm[x$wave == count[i-1]]) - meanNoContact
output[i] <- meanEffect
}
return(output)
}
## 获取数据框
SSMbyGay2 <- subset(gay, (gay$study == 2)&
(gay$treatment == "Same-Sex Marriage Script by Gay Canvasser"))
getSSMeffect2(SSMbyGay2)
count
count <- (2:7)
count <- count[-c(4,5)]
count
getSSMeffect2 <- function(x){
##
## Args: data.frame
## return: 每轮的平均效果
## 计算第一项研究中XXX对同性恋脚本的每轮效果的平均值
count <- (2:7)
count <- count[-c(4,5)]
output <- c()
for (i in 1:4) {
meanNoContact <- NoContact2.mean[i + 1, 1] - NoContact2.mean[1, 1]
meanEffect <-mean(x$ssm[x$wave == count[i]]) - mean(x$ssm[x$wave == count[i-1]]) - meanNoContact
output[i] <- meanEffect
}
return(output)
}
## 获取数据框
SSMbyGay2 <- subset(gay, (gay$study == 2)&
(gay$treatment == "Same-Sex Marriage Script by Gay Canvasser"))
getSSMeffect2(SSMbyGay2)
count[1]
getSSMeffect2 <- function(x){
##
## Args: data.frame
## return: 每轮的平均效果
## 计算第一项研究中XXX对同性恋脚本的每轮效果的平均值
count <- (2:7)
count <- count[-c(4,5)]
output <- c()
for (i in 1:4) {
meanNoContact <- NoContact2.mean[i + 1, 1] - NoContact2.mean[1, 1]
meanEffect <-mean(x$ssm[x$wave == count[i]]) - mean(x$ssm[x$wave == 1]) - meanNoContact
output[i] <- meanEffect
}
return(output)
}
## 获取数据框
SSMbyGay2 <- subset(gay, (gay$study == 2)&
(gay$treatment == "Same-Sex Marriage Script by Gay Canvasser"))
getSSMeffect2(SSMbyGay2)
SSMbyGay2.mean <- getSSMeffect2(SSMbyGay2)
Study2df <- data.frame("study1" = SSMbyGay1.mean[c(1,2,3,6)], "study2" = SSMbyGay2.mean )
Study2df
Studydf <- data.frame("study1" = SSMbyGay1.mean[c(1,2,3,6)], "study2" = SSMbyGay2.mean )
rownames(Study2df) <- c(2, 3 ,4,7)
Studydf
## 用数据框对比展示
Studydf <- data.frame("study1" = SSMbyGay1.mean[c(1,2,3,6)], "study2" = SSMbyGay2.mean )
rownames(Studydf) <- c(2, 3 ,4,7)
Studydf
SSMbyGay1.mean
getSSMeffect <- function(x){
##
## Args: data.frame
## return: 每轮的平均效果
## 计算第一项研究中XXX对同性恋脚本的每轮效果的平均值
count <- (2:7)
output <- c()
for (i in count) {
meanNoContact <- NoContact1.mean[i, 1] - NoContact1.mean[1, 1]
meanEffect <-mean(x$ssm[x$wave == i]) - mean(x$ssm[x$wave == 1]) - meanNoContact
output[i - 1] <- meanEffect
}
return(output)
}
# 每轮同性恋宣传同性恋脚本的平均效果
SSMbyGay1.mean <- getSSMeffect(SSMbyGay1)
SSMbyStra1.mean <- getSSMeffect(SSMbyStra1)
# 展示
SSMbyGay1.mean
SSMbyStra1.mean
Studydf <- data.frame("study1" = SSMbyGay1.mean[c(1,2,3,6)], "study2" = SSMbyGay2.mean )
rownames(Studydf) <- c(2, 3 ,4,7)
Studydf
## 多少国家至少遇到一次领导人刺杀
unique(leaders$country)
length(unique(leaders$country))
## 这些国家中每年刺杀的平均次数
range(leaders$year)
year.gap <- max(leaders$year) - min(leaders$year)  # 获取年的跨度
## 计算公式为 刺杀总数 / 年份数
table(leaders$country) / year.gap
## 数据描述
dim(leaders)
## 总体成功率
mean(leaders$success)
leaders$warbefore <- ifelse(leaders$interwarbefore == 1 |leaders$civilwarbefore == 1, 1, 0)
leaders$warbefore
## 刺杀之前的三年内是否参加国内或国际战争是否与暗杀企图的成功率有关。
warbefore.success <- tapply(leaders$warbefore, leaders$success, mean)
warbefore.success
politybe.success <- tapply(leaders$politybefore, leaders$success, mean)
politybe.success
## 暗杀成功与否与年龄是否有关系
tapply(leaders$age,leaders$success, mean)
## 计算刺杀成功与失败两种情况的后三年平均政权得分差值
afterPolity.mean <- tapply(leaders$polityafter, leaders$success, mean)
beforePolity.mean <- tapply(leaders$politybefore, leaders$success, mean)
## 计算前后平均政权得分差值
difPolity.mean <- afterPolity.mean - beforePolity.mean
## 用数据框展示前后及之间差值的数据
data.frame(beforePolity.mean, afterPolity.mean, difPolity.mean)
## 新建刺杀后国内外战争是否发生的二元变量
leaders$warafter <- ifelse(leaders$interwarafter == 1 | leaders$civilwarafter == 1, 1, 0)
leaders$warafter
beforeWar.mean <- mean(leaders$warbefore[leaders$success == 1])
afterWar.mean <-  mean(leaders$warafter[leaders$success == 1])
difWar.mean <- afterWar.mean - beforeWar.mean
data.frame(beforeWar.mean, afterWar.mean, difWar.mean)

lm(primary2006 ~ Control + Hawthorne + Neighbors, data = social)
##estimate average effect of "Neighbors" condition
coef(fit)["messageNrighbors"] - coef(fit)["messagesControl"]
## difference-in-means
mean(social$primary2006[social$messages == "Neighbors"]) -
mean(social$primary2006[social$messages == "Control"])
##estimate average effect of "Neighbors" condition
coef(fit)["messagesNrighbors"] - coef(fit)["messagesControl"]
## difference-in-means
mean(social$primary2006[social$messages == "Neighbors"]) -
mean(social$primary2006[social$messages == "Control"])
##estimate average effect of "Neighbors" condition
coef(fit)["messagesNeighbors"] - coef(fit)["messagesControl"]
## difference-in-means
mean(social$primary2006[social$messages == "Neighbors"]) -
mean(social$primary2006[social$messages == "Control"])
## adjusted R-squared
adjR2 <- function(fit){
resid <- resid(fit)
y <- fitted(fit) + resid
n <- length(y)
TTS.adj <- sum((y - mean(y))^2) / (n - 1)
SSR.adj <- sum(resid^2) / (n - length(coef(fit)))
R2.adj <- 1 - SSR.adj / TTS.adj
return(R2.adj)
}
adjR2(fit)
## adjusted R-squared
adjR2 <- function(fit){
resid <- resid(fit)
y <- fitted(fit) + resid
n <- length(y)
TTS.adj <- sum((y - mean(y))^2) / (n - 1)
SSR.adj <- sum(resid^2) / (n - length(coef(fit)))
R2.adj <- 1 - SSR.adj / TTS.adj
return(R2.adj)
}
adjR2(fit)
fitsummary <- summary(fit)
fitsummary$adj.r.squared
## adjusted R-squared
adjR2 <- function(fit){
resid <- resid(fit)
y <- fitted(fit) + resid
n <- length(y)
TTS.adj <- sum((y - mean(y))^2) / (n - 1)
SSR.adj <- sum(resid^2) / (n - length(coef(fit)))
R2.adj <- 1 - SSR.adj / TTS.adj
return(R2.adj)
}
adjR2(fit)
R2(fit)
fitsummary <- summary(fit)
fitsummary$adj.r.squared
## adjusted R-squared
adjR2 <- function(fit){
resid <- resid(fit)
y <- fitted(fit) + resid
n <- length(y)
TTS.adj <- sum((y - mean(y))^2) / (n - 1)
SSR.adj <- sum(resid^2) / (n - length(coef(fit)))
R2.adj <- 1 - SSR.adj / TTS.adj
return(R2.adj)
}
adjR2(fit)
R2(fit) ## 原来的R方
fitsummary <- summary(fit)
fitsummary$adj.r.squared
fitsummary.r.squared
## adjusted R-squared
adjR2 <- function(fit){
resid <- resid(fit)
y <- fitted(fit) + resid
n <- length(y)
TTS.adj <- sum((y - mean(y))^2) / (n - 1)
SSR.adj <- sum(resid^2) / (n - length(coef(fit)))
R2.adj <- 1 - SSR.adj / TTS.adj
return(R2.adj)
}
adjR2(fit)
R2(fit) ## 原来的R方
fitsummary <- summary(fit)
fitsummary$adj.r.squared
fitsummary$r.squared
social.neighbor <- subset(social, (messages == "Control") |
(messages == "Neighbors"))
## standard way to generate main and interaction effects
fit.int <- lm(primary2006 ~ primary2004 + messages + primary2004:messages,
data = social.neighbor)
fit.int
##
## file :Exercise1.R
## author: wxzher
## update: 2022-08-08
## the code for exercie in Chapter4
##
## 基于博彩市场的预测
## H：市场可以有效汇总可用信息
## 分析民主党和共和党候选人在每个州胜利的合同的市场价格来检验这种假设。
## 导入数据
intrade08 <- read.csv("Datasets/intrade08.csv")
intrade12 <- read.csv("Datasets/intrade12.csv")
dim(intrade08)
dim(intrade12)
summary(intrade08)
summary(intrade12)
head(intrade08)
head(intrade12)
view(intrade08)
views(intrade08)
View(intrade08)
intrade08 <- read.csv("Datasets/intrade08.csv")
intrade12 <- read.csv("Datasets/intrade12.csv")
## 分析数据
dim(intrade08)
dim(intrade12)
summary(intrade08)
summary(intrade12)
head(intrade08)
#### Question 1 ####
## convert to a Date object
intrade12$day
##
state.names <- unique(intrade08$statename)
length(state.names)
min(intrade12$DaytoElection)
intrade08$DaytoElection <- as.Date("2008-11-04") - intrade08$day
intrade08$day <- as.Date(intrade08$day)
intrade12$day <- as.Date(intrade12$day)
intrade08$DaytoElection <- as.Date("2008-11-04") - intrade08$day
intrade12$DaytoElection <- as.Date("2012-11-06") - intrade12$day
min(intrade12$DaytoElection)
## margin
intrade08$margin <- intrade08$PriceD - intrade08$PriceR
intrade12$margin <- intrade12$PriceD - intrade12$PriceR
## convert to a Date object
intrade08$day <- as.Date(intrade08$day)
intrade12$day <- as.Date(intrade12$day)
## compute Day to election
intrade08$DaytoElection <- as.Date("2008-11-04") - intrade08$day
intrade12$DaytoElection <- as.Date("2012-11-06") - intrade12$day
## create a new vector
intrade08.pred <- rep(NA, 51)
intrade12.pred <- rep(NA, 51)
##
state.names <- unique(intrade08$statename)
length(state.names)
names(intrade08.pred) <- state.names
Margincompare <- function(x, y){
for(i in 1:51){
data <- subset(x, subset = (state == state.names[i]))
Beforeaday <- subset(data, DaystoElecttion == 1)
y[i] <- mean(Beforeaday$margin)
}
}
Margincompare(intrade08, intrade08.pred)
Margincompare <- function(x, y){
for(i in 1:51){
data <- subset(x, subset = (state == state.names[i]))
Beforeaday <- subset(data, DaytoElection == 1)
y[i] <- mean(Beforeaday$margin)
}
}
Margincompare(intrade08, intrade08.pred)
Margincompare(intrade12, intrade12.pred)
intrade08.pred
Beforeaday <- subset(intrade08, DaytoElection == 1)
subset(intrade08, DaytoElection == 1)
state.names <- unique(intrade08$statename)
length(state.names)
names(intrade08.pred) <- state.names
Margincompare <- function(x, y){
for(i in 1:51){
data <- subset(x, subset = (state == state.names[i]))
Beforeaday <- subset(data, DaytoElection == 1)
y[i] <- mean(Beforeaday$margin)
}
}
Margincompare(intrade08, intrade08.pred)
Margincompare(intrade12, intrade12.pred)
intrade08.pred
intrade12.pred
Margincompare <- function(x, y){
for(i in 1:51){
data <- subset(x, subset = (state == state.names[i]))
Beforeaday <- subset(data, DaytoElection == 1)
y[i] <- mean(Beforeaday$margin，na.rm = TRUE)
Margincompare <- function(x, y){
for(i in 1:51){
data <- subset(x, subset = (state == state.names[i]))
Beforeaday <- subset(data, DaytoElection == 1)
y[i] <- mean(Beforeaday$margin,na.rm = TRUE)
}
}
Margincompare(intrade08, intrade08.pred)
Margincompare(intrade12, intrade12.pred)
intrade08.pred
intrade12.pred
state.names2 <- unique(intrade12$statename)
state.names2
length(state.names2)
Margincompare <- function(x, y){
for(i in 1:length(y)){
data <- subset(x, subset = (state == state.names[i]))
Beforeaday <- subset(data, DaytoElection == 1)
y[i] <- mean(Beforeaday$margin,na.rm = TRUE)
}
}
Margincompare(intrade08, intrade08.pred)
Margincompare(intrade12, intrade12.pred)
intrade08.pred
intrade12.pred
Beforeaday
state.names1 <- unique(intrade08$statename)
length(state.names1)
state.names2 <- unique(intrade12$statename)
state.names2
length(state.names2)
## create a new vector
intrade08.pred <- rep(NA, 51)
intrade12.pred <- rep(NA, 50)
names(intrade08.pred) <- state.names1
names(intrade12.pred) <- state.names2
for(i in 1:length(intrade08.pred)){
data <- subset(intrade08, subset = (state == state.names1[i]))
Beforeaday <- subset(data, DaytoElection == 1)
intrade08.pred[i] <- mean(Beforeaday$margin,na.rm = TRUE)
}
intrade08.pred
intrade08.pred
for(i in 1:length(intrade08.pred)){
data <- subset(intrade08, subset = (state == state.names1[i]))
Beforeaday <- subset(data, DaytoElection == 1)
intrade08.pred[i] <- mean(Beforeaday$margin)
}
intrade08.pred
intrade08.pred[1]
intrade08.pred[1] <- 2
intrade08.pred[1]
summary(intrade08)
for(i in 1:51){
data <- subset(intrade08, subset = (state.name == state.names1[i]))
Beforeaday <- subset(data, DaytoElection == 1)
intrade08.pred[i] <- mean(Beforeaday$margin)
}
intrade08.pred
Margincompare <- function(x, y){
for(i in 1:length(y)){
data <- subset(x, subset = (state.name == state.names[i]))
Beforeaday <- subset(data, DaytoElection == 1)
y[i] <- mean(Beforeaday$margin, na.rm = TRUE)
}
}
Margincompare(intrade08, intrade08.pred)
Margincompare(intrade12, intrade12.pred)
intrade08.pred
intrade12.pred
Margincompare <- function(x, y, z){
for(i in 1:length(y)){
data <- subset(x, subset = (state.name == z[i]))
Beforeaday <- subset(data, DaytoElection == 1)
y[i] <- mean(Beforeaday$margin, na.rm = TRUE)
}
}
Margincompare(intrade08, intrade08.pred, state.names1)
Margincompare(intrade12, intrade12.pred, state.names2)
intrade08.pred
intrade12.pred
Margincompare <- function(x, y, z){
for(i in 1:length(y)){
data <- subset(x, subset = (statename == z[i]))
Beforeaday <- subset(data, DaytoElection == 1)
y[i] <- mean(Beforeaday$margin, na.rm = TRUE)
}
}
Margincompare(intrade08, intrade08.pred, state.names1)
Margincompare(intrade12, intrade12.pred, state.names2)
intrade08.pred
intrade12.pred
Beforeaday
for(i in 1:50){
data <- subset(intrade12, subset = (statename == state.names2[i]))
Beforeaday <- subset(data, DaytoElection == 1)
intrade12.pred[i] <- mean(Beforeaday$margin)
}
intrade12.pred
intrade08.pred
intrade12.pred
length(intrade08$margin)
data <- subset(intrade08, subset = (statename == state.names1[i]))
Beforeaday <- subset(data, DaytoElection == 1)
length(Beforeaday)
data <- subset(intrade08, subset = (statename == state.names1[i]))
Beforeaday <- subset(data, DaytoElection == 1)
length(Beforeaday)
intrade08$margin.fact <- intrade08$VolumeD - intrade08$VolumeR
intrade12$margin.fact <- intrade12$VolumeD - intrade12$VolumeR
for(i in 1:51){
data <- subset(intrade08, subset = (statename == state.names1[i]))
Beforeaday <- subset(data, DaytoElection == 1)
length(Beforeaday)
intrade08.pred[i] <- Beforeaday$margin
intrade08.pred[i] <- Beforeaday$margin.fact
}
for(i in 1:51){
data <- subset(intrade08, subset = (statename == state.names1[i]))
Beforeaday <- subset(data, DaytoElection == 1)
length(Beforeaday)
intrade08.pred[i] <- Beforeaday$margin
intrade08.fact.mar[i] <- Beforeaday$margin.fact
}
intrade08.fact.mar <- rep(NA, 51)
intrade12.fact.mar <- rep(NA, 50)
for(i in 1:51){
data <- subset(intrade08, subset = (statename == state.names1[i]))
Beforeaday <- subset(data, DaytoElection == 1)
length(Beforeaday)
intrade08.pred[i] <- Beforeaday$margin
intrade08.fact.mar[i] <- Beforeaday$margin.fact
}
for(i in 1:50){
data <- subset(intrade12, subset = (statename == state.names2[i]))
Beforeaday <- subset(data, DaytoElection == 1)
intrade12.pred[i] <- Beforeaday$margin
intrade12.fact.mar[i] <- Beforeaday$margin.fact
}
intrade08.pred
intrade12.pred
intrade08.fact.mar
intrade12.fact.mar
subset(intrade12, DaytoElection == 1)
nrow(subset(intrade12, DaytoElection == 1))
for(i in 1:51){
data <- subset(intrade08, subset = (statename == state.names1[i]))
Beforeaday <- subset(data, DaytoElection == 1)
length(Beforeaday)
intrade08.pred[i] <- Beforeaday$margin
intrade08.fact.mar[i] <- Beforeaday$margin.fact
}
for(i in 1:50){
data <- subset(intrade12, subset = (statename == state.names2[i]))
Beforeaday <- subset(data, DaytoElection == 1)
intrade12.pred[i] <- mean(Beforeaday$margin, na.rm = TRUE)
intrade12.fact.mar[i] <- Beforeaday$margin.fact
}
intrade08.pred
intrade12.pred
intrade08.fact.mar
intrade12.fact.mar
if(is.na(intrade08$PriceD)){
0
}
## margin
if(is.na(intrade08$PriceD),0)
## margin
ifelse(is.na(intrade08$PriceD),0,)
## margin
intrade08$PriceD[is.na(intrade08$PriceD)] <-  0
intrade08$PriceD[is.na(intrade08$PriceD)] <-  0
intrade08$margin <- intrade08$PriceD - intrade08$PriceR
intrade12$margin <- intrade12$PriceD - intrade12$PriceR
intrade08$margin.fact <- intrade08$VolumeD - intrade08$VolumeR
intrade12$margin.fact <- intrade12$VolumeD - intrade12$VolumeR
for(i in 1:50){
data <- subset(intrade12, subset = (statename == state.names2[i]))
Beforeaday <- subset(data, DaytoElection == 1)
intrade12.pred[i] <- Beforeaday$margin
intrade12.fact.mar[i] <- Beforeaday$margin.fact
}
intrade08.pred
intrade12.pred
intrade08.fact.mar
intrade12.fact.mar
subset(intrade12, DaytoElection == 1)
intrade08$PriceD[is.na(intrade12$PriceD)] <-  0
intrade08$margin <- intrade08$PriceD - intrade08$PriceR
intrade12$margin <- intrade12$PriceD - intrade12$PriceR
intrade08$margin.fact <- intrade08$VolumeD - intrade08$VolumeR
intrade12$margin.fact <- intrade12$VolumeD - intrade12$VolumeR
## convert to a Date object
for(i in 1:50){
data <- subset(intrade12, subset = (statename == state.names2[i]))
Beforeaday <- subset(data, DaytoElection == 1)
intrade12.pred[i] <- Beforeaday$margin
intrade12.fact.mar[i] <- Beforeaday$margin.fact
}
intrade08.pred
intrade12.pred
intrade08.fact.mar
intrade12.fact.mar
intrade08 <- read.csv("Datasets/intrade08.csv")
intrade12 <- read.csv("Datasets/intrade12.csv")
intrade12$PriceD[is.na(intrade12$PriceD)] <-  0
intrade08$margin <- intrade08$PriceD - intrade08$PriceR
intrade12$margin <- intrade12$PriceD - intrade12$PriceR
intrade08$margin.fact <- intrade08$VolumeD - intrade08$VolumeR
intrade12$margin.fact <- intrade12$VolumeD - intrade12$VolumeR
intrade08$day <- as.Date(intrade08$day)
intrade12$day <- as.Date(intrade12$day)
## compute Day to election
intrade08$DaytoElection <- as.Date("2008-11-04") - intrade08$day
intrade12$DaytoElection <- as.Date("2012-11-06") - intrade12$day
##
state.names1 <- unique(intrade08$statename)
length(state.names1)
state.names2 <- unique(intrade12$statename)
state.names2
length(state.names2)
## create a new vector
intrade08.pred <- rep(NA, 51)
intrade12.pred <- rep(NA, 50)
intrade08.fact.mar <- rep(NA, 51)
intrade12.fact.mar <- rep(NA, 50)
names(intrade08.pred) <- state.names1
names(intrade12.pred) <- state.names2
for(i in 1:51){
data <- subset(intrade08, subset = (statename == state.names1[i]))
Beforeaday <- subset(data, DaytoElection == 1)
length(Beforeaday)
intrade08.pred[i] <- Beforeaday$margin
intrade08.fact.mar[i] <- Beforeaday$margin.fact
}
for(i in 1:50){
data <- subset(intrade12, subset = (statename == state.names2[i]))
Beforeaday <- subset(data, DaytoElection == 1)
intrade12.pred[i] <- Beforeaday$margin
intrade12.fact.mar[i] <- Beforeaday$margin.fact
}
intrade08.pred
intrade12.pred
intrade08.fact.mar
intrade12.fact.mar
subset(intrade12, DaytoElection == 1)
intrade12$PriceD[is.na(intrade12$PriceD)] <-  0
intrade12$PriceR[is.na(intrade12$PriceR)] <-  0
intrade08$margin <- intrade08$PriceD - intrade08$PriceR
intrade12$margin <- intrade12$PriceD - intrade12$PriceR
intrade08$margin.fact <- intrade08$VolumeD - intrade08$VolumeR
intrade12$margin.fact <- intrade12$VolumeD - intrade12$VolumeR
## convert to a Date object
for(i in 1:50){
data <- subset(intrade12, subset = (statename == state.names2[i]))
Beforeaday <- subset(data, DaytoElection == 1)
intrade12.pred[i] <- Beforeaday$margin
intrade12.fact.mar[i] <- Beforeaday$margin.fact
}
intrade08.pred
intrade12.pred
intrade08.fact.mar
intrade12.fact.mar
progresa <- read.csv("Datasets/progresa.csv")
dim(progresa)
summary(progresa)
progresa$pri.share <- (progresa$pri2000s / progresa$t2000) * 100
pri2000.origin <- progresa$pri.share[progresa$treatment == 0]
pri2000.later <- progresa$pri.share[progresa$treatment == 1]
length(pri2000.origin)
length(pri2000.later)
plot(progresa$treatment, .share, pch = 16, col = ifelse(share[progresa$treatment == 0], "blue","red"),
ylim = c(0, 100),
)
plot(progresa$treatment, progresa$pri.share, pch = 16, col = ifelse(progresa$treatment == 0, "blue","red"),
ylim = c(0, 100),
)
cor(progresa$treatment, progresa$pri.share)
cor(progresa$treatment, progresa$pri2000s)
mean(progresa$pri2000v[progresa$treatment == 1])
mean(progresa$pri2000v[progresa$treatment == 0])
mean(progresa$pri2000s[progresa$treatment == 1])
mean(progresa$pri2000s[progresa$treatment == 0])
mean(progresa$pri2000s[progresa$treatment == 1]) - mean(progresa$pri2000s[progresa$treatment == 0])
lm(pri2000s ~ treament, progresa)
lm(pri2000s ~ treament, data = progresa)
lm(pri2000s ~ treatment, data = progresa)
cor(progresa$treatment, progresa$pri2000s)
cor(progresa$treatment, progresa$pri2000s)
coef(fit)
head(fitted(fit)
plot(progresa$treatment, progresa$pri2000s,
mean(progresa$pri2000s[progresa$treatment == 1]) - mean(progresa$pri2000s[progresa$treatment == 0])
fit <- lm(pri2000s ~ treatment, data = progresa)
cor(progresa$treatment, progresa$pri2000s)
coef(fit)
head(fitted(fit))
plot(progresa$treatment, progresa$pri2000s,
ylim = c(0, 100), xlab = "Competence scores for Democract",
ylab = "Democractic margin in vote share",
main = "Facial competence and vote share")
abline(fit)
abline(v = 0, lty = "dashed")
coef(fit)
cor(progresa$treatment, progresa$pri2000s)
cor( progresa$pri2000s，progresa$treatment)
cor( progresa$pri2000s,progresa$treatment)
cor(progresa$treatment,progresa$pri2000s/progresa$t2000)
progresa$share <- (progresa$pri2000s / progresa$t2000) * 100
fit <- lm(share ~ avgpoverty + pobtot1994 + votos1994 + pri1994 + pan1994 + prd1994, data = progresa)
fit
factors <- data.frame(factors = c(1,2,3,4,5,6,7))
predict(fit, newdata = factors)
factors <- data.frame(factors = c("Intercept","avgpoverty","pobtot1994","votos1994","pri1994"," pan1994","prd1994"))
predict(fit, newdata = factors)
factors
factors <- data.frame(factors = c("avgpoverty","pobtot1994","votos1994","pri1994"," pan1994","prd1994"))
factors
predict(fit, newdata = factors)
progresa$share <- (progresa$pri2000s / progresa$t2000) * 100
fit <- lm(share ~ avgpoverty + pobtot1994 + votos1994 + pri1994 + pan1994 + prd1994, data = progresa)
fit
factors <- data.frame(factors = c("Intercept","avgpoverty","pobtot1994","votos1994","pri1994"," pan1994","prd1994"))
factors
predict(fit, newdata = factors)
